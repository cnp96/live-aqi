{"version":3,"sources":["redux/aqiReducer.ts","components/App/aqiCard.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["aqiReducer","state","action","type","_toObject","payload","data","reduce","prev","curr","city","aqi","AQICard","React","props","className","val","toFixed","capitalize","name","App","useReducer","dispatch","useEffect","client","W3CWebSocket","onopen","console","log","onmessage","message","parsedData","JSON","parse","onerror","err","error","close","Object","entries","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAQaA,EAAa,SAACC,EAAkBC,GAC3C,OAAQA,EAAOC,MACb,IAAK,SACH,OAAO,2BAAKF,GAAUG,EAAUF,EAAOG,UACzC,QACE,OAAOJ,IAIPG,EAAY,SAACE,GACjB,OAAOA,EAAKC,QAA+B,SAACC,EAAMC,GAEhD,OADAD,EAAKC,EAAKC,MAAQD,EAAKE,IAChBH,IACN,K,cCuBUI,EAbyBC,QAAW,SAACC,GAClD,OACE,qBAAKC,UAAS,mBAhBGC,EAgBsBF,EAAMH,IAfxCK,GAAO,GACV,OACAA,GAAO,IACP,eACAA,GAAO,IACP,WACAA,GAAO,IACP,OACAA,GAAO,IACP,YACA,WAKF,SACE,qBAAKD,UAAU,YAAf,SACE,gCACE,qBAAKA,UAAU,UAAf,SAA0BD,EAAMH,IAAIM,QAAQ,KAC5C,8BAAMC,qBAAWJ,EAAMK,eApBb,IAACH,KCXN,SAASI,IAAO,IAAD,EACHC,qBAAWrB,EAAY,IADpB,mBACrBM,EADqB,KACfgB,EADe,KAsB5B,OAnBAC,qBAAU,WACR,IAAMC,EAAS,IAAIC,eAAa,+BAYhC,OAXAD,EAAOE,OAAS,WACdC,QAAQC,IAAI,+BAEdJ,EAAOK,UAAY,SAACC,GAClB,IAAMC,EAAyBC,KAAKC,MAAMH,EAAQxB,MAClDgB,EAAS,CAAEnB,KAAM,SAAUE,QAAS0B,KAEtCP,EAAOU,QAAU,SAACC,GAChBR,QAAQS,MAAMD,IAGT,WACLX,EAAOa,QACPV,QAAQC,IAAI,0BAEb,IAGD,sBAAKb,UAAU,MAAf,UACE,mDACA,qBAAKA,UAAU,WAAf,SACGuB,OAAOC,QAAQjC,GAAMkC,KAAI,WAAcC,GAAW,IAAD,mBAAtB/B,EAAsB,KAAhBC,EAAgB,KAChD,OAAO,cAAC,EAAD,CAAqBQ,KAAMT,EAAMC,IAAKA,GAAxB8B,WC/B/B,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e4123df0.chunk.js","sourcesContent":["export interface IAQIData {\n  city: string;\n  aqi: number;\n}\n\nexport type Action = { type: \"update\"; payload: IAQIData[] };\nexport type TCityData = Record<string, number>;\n\nexport const aqiReducer = (state: TCityData, action: Action) => {\n  switch (action.type) {\n    case \"update\":\n      return { ...state, ..._toObject(action.payload) };\n    default:\n      return state;\n  }\n};\n\nconst _toObject = (data: IAQIData[]) => {\n  return data.reduce<Record<string, number>>((prev, curr) => {\n    prev[curr.city] = curr.aqi;\n    return prev;\n  }, {});\n};\n","import * as React from \"react\";\nimport { capitalize } from \"lodash\";\n\nexport interface AQICardProps {\n  name: string;\n  aqi: number;\n}\n\nconst category = {\n  50: \"bg-good\",\n  100: \"bg-satisfactory\",\n  200: \"bg-moderate\",\n  300: \"bg-poor\",\n  400: \"bg-very-poor\",\n  500: \"bg-severe\",\n};\n\nconst getCategory = (val: number) => {\n  return val <= 50\n    ? \"good\"\n    : val <= 100\n    ? \"satisfactory\"\n    : val <= 200\n    ? \"moderate\"\n    : val <= 300\n    ? \"poor\"\n    : val <= 400\n    ? \"very-poor\"\n    : \"severe\";\n};\n\nconst AQICard: React.FC<AQICardProps> = React.memo((props) => {\n  return (\n    <div className={`card bg-${getCategory(props.aqi)}`}>\n      <div className=\"card-body\">\n        <div>\n          <div className=\"text-lg\">{props.aqi.toFixed(2)}</div>\n          <div>{capitalize(props.name)}</div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default AQICard;\n","import React, { useEffect, useReducer } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport \"./App.scss\";\nimport { aqiReducer, IAQIData } from \"../../redux/aqiReducer\";\nimport AQICard from \"./aqiCard\";\n\nexport default function App() {\n  const [data, dispatch] = useReducer(aqiReducer, {});\n\n  useEffect(() => {\n    const client = new W3CWebSocket(\"wss://city-ws.herokuapp.com\");\n    client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n    };\n    client.onmessage = (message) => {\n      const parsedData: IAQIData[] = JSON.parse(message.data as string);\n      dispatch({ type: \"update\", payload: parsedData });\n    };\n    client.onerror = (err) => {\n      console.error(err);\n    };\n\n    return () => {\n      client.close();\n      console.log(\"Client disconnected\");\n    };\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Air Quality Index</h1>\n      <div className=\"overview\">\n        {Object.entries(data).map(([city, aqi], index) => {\n          return <AQICard key={index} name={city} aqi={aqi} />;\n        })}\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}