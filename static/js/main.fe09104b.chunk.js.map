{"version":3,"sources":["redux/aqiReducer.ts","util/common.ts","components/App/table.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["aqiReducer","state","action","type","now","Date","payload","data","city","aqi","lastUpdated","formatTime","from","s","valueOf","m","toISOString","AQITable","React","props","tdata","Object","entries","className","length","map","index","val","meta","category","capitalize","toFixed","colSpan","App","client","useReducer","dispatch","msgHandler","msg","connect","onMessage","W3CWebSocket","onopen","console","log","onmessage","message","parsedData","JSON","parse","onerror","err","close","error","onclose","e","code","retry","setInterval","readyState","clearInterval","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAQaA,EAAa,SAACC,EAAkBC,GAC3C,OAAQA,EAAOC,MACb,IAAK,SACH,IADF,EACQC,EAAM,IAAIC,KACRC,EAAYJ,EAAZI,QAFV,cAGmBA,GAHnB,IAGE,2BAA0B,CAAC,IAAlBC,EAAiB,QACxBN,EAAMM,EAAKC,MAAQ,CACjBC,IAAKF,EAAKE,IACVC,YAAaN,IANnB,8BASE,OAAO,eAAKH,GACd,QACE,OAAOA,I,eCrBAU,EAAa,SAACC,GACzB,IAEMC,IAFK,IAAIR,MAAOS,UAAYF,EAAKE,WAExB,IACTC,EAAIF,EAAI,GAEd,OAAOA,GAAK,EACR,MACAA,EAAI,GAAJ,UACO,EAAJA,EADH,kBAEAE,EAAI,GAAJ,UACO,EAAJA,EADH,+BAEMH,EAAKI,gB,OCuDFC,EA5C2BC,QAAW,SAACC,GAAW,IACvDZ,EAASY,EAATZ,KAEFa,EAAQC,OAAOC,QAAQf,GAE7B,OACE,wBAAOgB,UAAU,eAAjB,UACE,gCACE,+BACE,uCACA,sCACA,6CACA,8CACA,6CAGJ,gCACGH,EAAMI,OACLJ,EAAMK,KAAI,WAAeC,GAAW,IAhCzBC,EAgCwB,mBAAvBnB,EAAuB,KAAjBoB,EAAiB,KAC3BC,GAjCGF,EAiCoBC,EAAKnB,MAhC9B,GACV,OACAkB,GAAO,IACP,eACAA,GAAO,IACP,WACAA,GAAO,IACP,OACAA,GAAO,IACP,YACA,SAuBM,OACE,+BACE,6BAAKD,IACL,6BAAKI,qBAAWtB,KAChB,oBAAIe,UAAS,cAASM,GAAtB,SAAmCD,EAAKnB,IAAIsB,QAAQ,KACpD,6BAAKpB,EAAWiB,EAAKlB,eACrB,6BACE,oDANKgB,MAYb,6BACE,oBAAIM,QAAS,EAAb,SACE,qBAAKT,UAAU,8BAAf,wCCpDC,SAASU,IAAO,IAOzBC,EAPwB,EACHC,qBAAWnC,EAAY,IADpB,mBACrBO,EADqB,KACf6B,EADe,KAGtBC,EAAa,SAACC,GAClBF,EAAS,CAAEjC,KAAM,SAAUG,QAASgC,KAIhCC,EAAU,SAAVA,EAAWC,GA0Bf,OAzBAN,EAAS,IAAIO,eAAa,gCACnBC,OAAS,WACdC,QAAQC,IAAI,+BAEdV,EAAOW,UAAY,SAACC,GAClB,IAAMC,EAAyBC,KAAKC,MAAMH,EAAQvC,MAClDiC,GAAaA,EAAUO,IAEzBb,EAAOgB,QAAU,SAACC,GAChBjB,EAAOkB,MAAM,MACbT,QAAQU,MAAMF,IAEhBjB,EAAOoB,QAAU,SAACC,GAEhB,GAAIA,EAAEC,KAAO,IACX,IAAMC,EAAQC,aAAY,WACE,IAAtBxB,EAAOyB,YACThB,QAAQC,IAAI,0BACZV,EAASK,EAAQF,IAEjBuB,cAAcH,KAEf,MAGAvB,GAYT,OARA2B,qBAAU,WAER,OADA3B,EAASK,EAAQF,GACV,WACLH,EAAOkB,MAAM,KACbT,QAAQC,IAAI,0BAEb,IAGD,iCACE,mDACA,qBAAKrB,UAAU,WAAf,SACE,cAAC,EAAD,CAAUhB,KAAMA,SCtDxB,IAYeuD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe09104b.chunk.js","sourcesContent":["export interface IAQIData {\n  city: string;\n  aqi: number;\n}\n\nexport type Action = { type: \"update\"; payload: IAQIData[] };\nexport type TCityData = Record<string, { aqi: number; lastUpdated: Date }>;\n\nexport const aqiReducer = (state: TCityData, action: Action) => {\n  switch (action.type) {\n    case \"update\":\n      const now = new Date();\n      const { payload } = action;\n      for (let data of payload) {\n        state[data.city] = {\n          aqi: data.aqi,\n          lastUpdated: now,\n        };\n      }\n      return { ...state };\n    default:\n      return state;\n  }\n};\n","export const formatTime = (from: Date) => {\n  const ms = new Date().valueOf() - from.valueOf();\n\n  const s = ms / 1000;\n  const m = s / 60;\n\n  return s <= 1\n    ? \"now\"\n    : s < 60\n    ? `${s ^ 0} second(s) ago`\n    : m < 60\n    ? `${m ^ 0} minute(s) ago`\n    : `at ${from.toISOString()}`;\n};\n","import { capitalize } from \"lodash\";\nimport * as React from \"react\";\nimport { TCityData } from \"../../redux/aqiReducer\";\nimport { formatTime } from \"../../util/common\";\nexport interface AQITableProps {\n  data: TCityData;\n  onChange?: (cities: Record<string, boolean>) => void;\n}\n\nconst getCategory = (val: number) => {\n  return val <= 50\n    ? \"good\"\n    : val <= 100\n    ? \"satisfactory\"\n    : val <= 200\n    ? \"moderate\"\n    : val <= 300\n    ? \"poor\"\n    : val <= 400\n    ? \"very-poor\"\n    : \"severe\";\n};\n\nconst AQITable: React.FC<AQITableProps> = React.memo((props) => {\n  const { data } = props;\n\n  const tdata = Object.entries(data);\n\n  return (\n    <table className=\"styled-table\">\n      <thead>\n        <tr>\n          <th>Index</th>\n          <th>City</th>\n          <th>Current AQI</th>\n          <th>Last Updated</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tdata.length ? (\n          tdata.map(([city, meta], index) => {\n            const category = getCategory(meta.aqi);\n            return (\n              <tr key={index}>\n                <td>{index}</td>\n                <td>{capitalize(city)}</td>\n                <td className={`aqi ${category}`}>{meta.aqi.toFixed(2)}</td>\n                <td>{formatTime(meta.lastUpdated)}</td>\n                <td>\n                  <button>Live chart</button>\n                </td>\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td colSpan={5}>\n              <div className=\"w-100 d-flex justify-center\">Please wait...</div>\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n});\n\nexport default AQITable;\n","import React, { useEffect, useReducer } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { aqiReducer, IAQIData } from \"../../redux/aqiReducer\";\nimport \"./App.scss\";\nimport AQITable from \"./table\";\n\nexport default function App() {\n  const [data, dispatch] = useReducer(aqiReducer, {});\n\n  const msgHandler = (msg: IAQIData[]) => {\n    dispatch({ type: \"update\", payload: msg });\n  };\n\n  let client: W3CWebSocket;\n  const connect = (onMessage: (msg: IAQIData[]) => void) => {\n    client = new W3CWebSocket(\"wss://city-ws.herokuapp.com\");\n    client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n    };\n    client.onmessage = (message) => {\n      const parsedData: IAQIData[] = JSON.parse(message.data as string);\n      onMessage && onMessage(parsedData);\n    };\n    client.onerror = (err) => {\n      client.close(3001);\n      console.error(err);\n    };\n    client.onclose = (e) => {\n      // Retry logic, if connection is not closed gracefully\n      if (e.code < 3000) {\n        const retry = setInterval(() => {\n          if (client.readyState === 3) {\n            console.log(\"Reconnecting to server\");\n            client = connect(msgHandler);\n          } else {\n            clearInterval(retry);\n          }\n        }, 500);\n      }\n    };\n    return client;\n  };\n\n  // Connect to socket on mount\n  useEffect(() => {\n    client = connect(msgHandler);\n    return () => {\n      client.close(3000);\n      console.log(\"Client disconnected\");\n    };\n  }, []);\n\n  return (\n    <main>\n      <h1>Air Quality Index</h1>\n      <div className=\"overview\">\n        <AQITable data={data} />\n\n        {/* <div className=\"chart\">\n          <LineChart labels={Object.keys(compareCities)} data={aqiHistory} />\n        </div> */}\n      </div>\n    </main>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}