{"version":3,"sources":["components/Charts/line.tsx"],"names":["LineChart","props","chartRef","useRef","getChartData","labels","data","map","d","moment","x","format","datasets","label","y","fill","borderColor","borderWidth","chart","useEffect","current","Chart","type","options","animation","undefined","scales","xAxes","yAxes","ticks","suggestedMin","destroy","update","ref"],"mappings":"2GAAA,2DA4EeA,UApE6B,SAACC,GAC3C,IAAMC,EAAWC,iBAA0B,MAErCC,EAAe,WACnB,MAAO,CACLC,OAAQJ,EAAMK,KAAKC,KAAI,SAACC,GAAD,OAAOC,IAAOD,EAAEE,GAAGC,OAAO,eACjDC,SAAU,CACR,CACEC,MAAOZ,EAAMY,MACbP,KAAML,EAAMK,KAAKC,KAAI,SAACC,GAAD,OAAOA,EAAEM,KAC9BC,MAAM,EACNC,YAAa,YACbC,YAAa,QAMjBC,EAAQf,mBA+CZ,OA9CAgB,qBAAU,WA4BR,OA3BIjB,EAASkB,UACXF,EAAME,QAAU,IAAIC,IAAMnB,EAASkB,QAAS,CAC1CE,KAAM,OACNhB,KAAMF,IACNmB,QAAS,CACPC,eAAWC,EACXC,OAAQ,CACNC,MAAO,GAQPC,MAAO,CACL,CACEC,MAAO,CACLC,aAAc,YASrB,WAAO,IAAD,EACX,UAAAZ,EAAME,eAAN,SAAeW,aAEhB,IAEHZ,qBAAU,WACJD,EAAME,UACRF,EAAME,QAAQd,KAAOF,IACrBc,EAAME,QAAQY,YAEf,CAAC/B,EAAMK,OAEVa,qBAAU,WACJD,EAAME,UACRF,EAAME,QAAQd,KAAKM,SAAW,MAE/B,CAACX,EAAMY,QAEH,wBAAQoB,IAAK/B","file":"static/js/4.d56a9b13.chunk.js","sourcesContent":["import Chart from \"chart.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport moment from \"moment\";\nexport interface LineChartProps {\n  label: string;\n  data: { x: Date; y: number }[];\n}\n\nconst LineChart: React.FC<LineChartProps> = (props) => {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n\n  const getChartData = (): Chart.ChartData => {\n    return {\n      labels: props.data.map((d) => moment(d.x).format(\"HH:mm:ss\")),\n      datasets: [\n        {\n          label: props.label,\n          data: props.data.map((d) => d.y),\n          fill: false,\n          borderColor: \"#a20a0a60\",\n          borderWidth: 1.5,\n        },\n      ],\n    };\n  };\n\n  let chart = useRef<Chart>();\n  useEffect(() => {\n    if (chartRef.current) {\n      chart.current = new Chart(chartRef.current, {\n        type: \"line\",\n        data: getChartData(),\n        options: {\n          animation: undefined,\n          scales: {\n            xAxes: [\n              // {\n              //   type: \"time\",\n              //   time: {\n              //     displayFormats: { second: \"hh:mm:ss\" },\n              //   },\n              // },\n            ],\n            yAxes: [\n              {\n                ticks: {\n                  suggestedMin: 200,\n                },\n              },\n            ],\n          },\n        },\n      });\n    }\n\n    return () => {\n      chart.current?.destroy();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (chart.current) {\n      chart.current.data = getChartData();\n      chart.current.update();\n    }\n  }, [props.data]);\n\n  useEffect(() => {\n    if (chart.current) {\n      chart.current.data.datasets = [];\n    }\n  }, [props.label]);\n\n  return <canvas ref={chartRef}></canvas>;\n};\n\nexport default LineChart;\n"],"sourceRoot":""}