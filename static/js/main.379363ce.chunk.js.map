{"version":3,"sources":["redux/aqiReducer.ts","util/common.ts","components/App/table.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["aqiReducer","state","action","type","now","Date","payload","data","city","aqi","lastUpdated","aqiHistoryReducer","newState","x","y","parseFloat","toFixed","length","shift","formatTime","from","s","valueOf","m","toISOString","AQITable","React","props","selectedCity","setCity","tdata","Object","entries","className","map","index","val","meta","category","capitalize","onClick","newCity","undefined","onChange","onCitySelection","colSpan","LineChart","lazy","App","client","useReducer","dispatchAqi","useState","cityRef","useRef","aqiHistory","dispatchAqiHistory","onMessage","msg","cityData","find","current","connect","W3CWebSocket","onopen","console","log","onmessage","message","parsedData","JSON","parse","onerror","err","close","error","onclose","e","code","retry","setInterval","readyState","clearInterval","useEffect","Suspense","fallback","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.379363ce.chunk.js","sourcesContent":["export interface IAQIData {\n  city: string;\n  aqi: number;\n}\n\nexport type TAQIAction = { type: \"update\"; payload: IAQIData[] };\nexport type TCityData = Record<string, { aqi: number; lastUpdated: Date }>;\n\nexport const aqiReducer = (state: TCityData, action: TAQIAction) => {\n  switch (action.type) {\n    case \"update\":\n      const now = new Date();\n      const { payload } = action;\n      for (let data of payload) {\n        state[data.city] = {\n          aqi: data.aqi,\n          lastUpdated: now,\n        };\n      }\n      return { ...state };\n    default:\n      return state;\n  }\n};\n\nexport type TAQIHistoryAction =\n  | { type: \"add\"; payload: number }\n  | { type: \"clear\" };\nexport type TAQIHistory = { x: Date; y: number }[];\nexport const aqiHistoryReducer = (\n  state: TAQIHistory,\n  action: TAQIHistoryAction\n) => {\n  switch (action.type) {\n    case \"add\":\n      const newState = [\n        ...state,\n        { x: new Date(), y: parseFloat(action.payload.toFixed(2)) },\n      ];\n      if (newState.length > 20) {\n        newState.shift();\n      }\n      return newState;\n    case \"clear\":\n      return [];\n    default:\n      return state;\n  }\n};\n","export const formatTime = (from: Date) => {\n  const ms = new Date().valueOf() - from.valueOf();\n\n  const s = ms / 1000;\n  const m = s / 60;\n\n  return s <= 1\n    ? \"now\"\n    : s < 60\n    ? `${s ^ 0} second(s) ago`\n    : m < 60\n    ? `${m ^ 0} minute(s) ago`\n    : `at ${from.toISOString()}`;\n};\n","import { capitalize } from \"lodash\";\nimport * as React from \"react\";\nimport { TCityData } from \"../../redux/aqiReducer\";\nimport { formatTime } from \"../../util/common\";\nexport interface AQITableProps {\n  data: TCityData;\n  onChange?: (city?: string) => void;\n}\n\nconst getCategory = (val: number) => {\n  return val <= 50\n    ? \"good\"\n    : val <= 100\n    ? \"satisfactory\"\n    : val <= 200\n    ? \"moderate\"\n    : val <= 300\n    ? \"poor\"\n    : val <= 400\n    ? \"very-poor\"\n    : \"severe\";\n};\n\nconst AQITable: React.FC<AQITableProps> = React.memo((props) => {\n  const [selectedCity, setCity] = React.useState<string>();\n\n  const onCitySelection = (city: string) => {\n    const newCity = selectedCity === city ? undefined : city;\n    setCity(newCity);\n    props.onChange && props.onChange(newCity);\n  };\n\n  const { data } = props;\n  const tdata = Object.entries(data);\n\n  return (\n    <table className=\"styled-table\">\n      <thead>\n        <tr>\n          <th>Index</th>\n          <th>City</th>\n          <th>Current AQI</th>\n          <th>Last Updated</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tdata.length ? (\n          tdata.map(([city, meta], index) => {\n            const category = getCategory(meta.aqi);\n            return (\n              <tr key={index} className={city === selectedCity ? \"active\" : \"\"}>\n                <td>{index}</td>\n                <td>{capitalize(city)}</td>\n                <td className={`aqi ${category}`}>{meta.aqi.toFixed(2)}</td>\n                <td>{formatTime(meta.lastUpdated)}</td>\n                <td>\n                  <button onClick={() => onCitySelection(city)}>\n                    {selectedCity === city ? \"Clear selection\" : \"Live Chart\"}\n                  </button>\n                </td>\n              </tr>\n            );\n          })\n        ) : (\n          <tr>\n            <td colSpan={5}>\n              <div className=\"w-100 d-flex justify-center\">Please wait...</div>\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n});\n\nexport default AQITable;\n","import React, { useEffect, useReducer, useRef, useState } from \"react\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport {\n  aqiHistoryReducer,\n  aqiReducer,\n  IAQIData,\n} from \"../../redux/aqiReducer\";\nimport \"./App.scss\";\nimport AQITable from \"./table\";\nconst LineChart = React.lazy(() => import(\"../Charts/line\"));\n\nexport default function App() {\n  const [data, dispatchAqi] = useReducer(aqiReducer, {});\n  const [selectedCity, setCity] = useState<string>();\n  const cityRef = useRef<string>();\n  const [aqiHistory, dispatchAqiHistory] = useReducer(aqiHistoryReducer, []);\n\n  const onMessage = (msg: IAQIData[]) => {\n    // Update redux store\n    dispatchAqi({ type: \"update\", payload: msg });\n\n    // Update chart\n    const cityData = msg.find((m) => m.city === cityRef.current);\n    if (cityData) {\n      dispatchAqiHistory({ type: \"add\", payload: cityData.aqi });\n    }\n  };\n  const onChangeCity = (city?: string) => {\n    setCity(city);\n    //! Using ref because setState op is taking a longer duration\n    cityRef.current = city;\n    dispatchAqiHistory({ type: \"clear\" });\n  };\n\n  let client: W3CWebSocket;\n  const connect = (onMessage: (msg: IAQIData[]) => void) => {\n    client = new W3CWebSocket(\"wss://city-ws.herokuapp.com\");\n    client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n    };\n    client.onmessage = (message) => {\n      const parsedData: IAQIData[] = JSON.parse(message.data as string);\n      onMessage && onMessage(parsedData);\n    };\n    client.onerror = (err) => {\n      client.close(3001);\n      console.error(err);\n    };\n    client.onclose = (e) => {\n      // Retry logic, if connection is not closed gracefully\n      if (e.code < 3000) {\n        const retry = setInterval(() => {\n          if (client.readyState === 3) {\n            console.log(\"Reconnecting to server\");\n            client = connect(onMessage);\n          } else {\n            clearInterval(retry);\n          }\n        }, 500);\n      }\n    };\n    return client;\n  };\n\n  // Connect to socket on mount\n  useEffect(() => {\n    client = connect(onMessage);\n    return () => {\n      client.close(3000);\n      console.log(\"Client disconnected\");\n    };\n  }, []);\n\n  return (\n    <main>\n      {/* <h2>Air Quality Index</h2> */}\n      <div className=\"overview\">\n        <AQITable data={data} onChange={onChangeCity} />\n        {selectedCity ? (\n          <div className=\"chart\">\n            <React.Suspense fallback=\"Loading chart...\">\n              <LineChart label={selectedCity} data={aqiHistory} />\n              <p>Showing a maximum of 20 records</p>\n            </React.Suspense>\n          </div>\n        ) : null}\n      </div>\n    </main>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}